{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Personne from \"../class/CPersonne\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ConnexionUser = Personne.getInstance();\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen(props) {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    _this = _super.call(this, props);\n\n    _this.connexion = function _callee() {\n      var userInformation;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(ConnexionUser.login(_this.state.username, _this.state.userPassword));\n\n            case 2:\n              userInformation = ConnexionUser.getInformationJoueur();\n\n              if (userInformation.type == \"entraineur\") {\n                _this.props.navigation.reset({\n                  index: 0,\n                  routes: [{\n                    name: 'EntraineurInterface'\n                  }]\n                });\n              } else if (userInformation.type == \"joueur\") {\n                _this.props.navigation.reset({\n                  index: 0,\n                  routes: [{\n                    name: 'JoueurInterface'\n                  }]\n                });\n              } else {\n                alert(\"Reessayer\");\n                console.log(userInformation.type);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      username: '',\n      userPassword: ''\n    };\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsxs(SafeAreaView, {\n        style: styles.container,\n        children: [_jsx(View, {\n          style: styles.Logo,\n          children: _jsx(Image, {\n            source: require(\"../assets/image/logo1.png\")\n          })\n        }), _jsx(View, {\n          style: styles.usernameBlock,\n          children: _jsx(TextInput, {\n            style: styles.loginText,\n            placeholder: \"Nom d'utilisateur\",\n            autoCapitalize: \"none\",\n            onChangeText: function onChangeText(username) {\n              return _this2.setState({\n                username: username\n              });\n            }\n          })\n        }), _jsx(View, {\n          style: styles.passwordBlock,\n          children: _jsx(TextInput, {\n            style: styles.loginText,\n            placeholder: \"Mot de passe\",\n            secureTextEntry: true,\n            autoCapitalize: \"none\",\n            onChangeText: function onChangeText(userPassword) {\n              return _this2.setState({\n                userPassword: userPassword\n              });\n            }\n          })\n        }), _jsx(View, {\n          children: _jsx(TouchableOpacity, {\n            style: styles.BoutonConnexion,\n            onPress: this.connexion,\n            children: _jsx(Text, {\n              style: styles.BoutonText,\n              children: \"Connexion\"\n            })\n          })\n        })]\n      });\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nexport { LoginScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    backgroundColor: '#013E23'\n  },\n  Logo: {\n    top: 80\n  },\n  usernameBlock: {\n    marginTop: 200,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  loginText: {\n    padding: 10,\n    justifyContent: 'center',\n    width: 200,\n    height: 50,\n    fontSize: 20,\n    borderRadius: 20,\n    backgroundColor: \"#FFF\",\n    fontFamily: 'SFMedium',\n    textAlign: 'center'\n  },\n  passwordBlock: {\n    top: 20\n  },\n  BoutonConnexion: {\n    top: 100,\n    width: 200,\n    height: 50,\n    borderRadius: 20,\n    backgroundColor: \"#39AD69\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  BoutonText: {\n    fontSize: 20,\n    fontFamily: 'SFMedium'\n  }\n});","map":{"version":3,"sources":["C:/Users/Massimiliano/Desktop/Perso/Programmation/Application_Mobile/SmartCage/screen/LoginScreen.js"],"names":["React","Component","Personne","ConnexionUser","getInstance","LoginScreen","props","connexion","login","state","username","userPassword","userInformation","getInformationJoueur","type","navigation","reset","index","routes","name","alert","console","log","styles","container","Logo","require","usernameBlock","loginText","setState","passwordBlock","BoutonConnexion","BoutonText","StyleSheet","create","flex","alignItems","backgroundColor","top","marginTop","justifyContent","padding","width","height","fontSize","borderRadius","fontFamily","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { StyleSheet, Text, View, SafeAreaView, TouchableOpacity, Image, TextInput} from 'react-native';\r\nimport Personne from '../class/CPersonne';\r\n\r\n/*Création de l'ecran LoginScreen qui consistera à logger/identifier les tulisateurs */\r\n\r\nvar ConnexionUser = Personne.getInstance();\r\n\r\nexport default class LoginScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          username : '',\r\n          userPassword : '',\r\n        };\r\n      }\r\n\r\n//fonction pour se connecter à ma bdd\r\n      connexion = async() => {\r\n        await ConnexionUser.login(this.state.username, this.state.userPassword);\r\n        \r\n    \r\n       var userInformation = ConnexionUser.getInformationJoueur();\r\n    \r\n    \r\n        if(userInformation.type == \"entraineur\"){\r\n          this.props.navigation.reset({index: 0, routes: [{ name: 'EntraineurInterface' }],});\r\n        }\r\n\r\n        else if(userInformation.type == \"joueur\"){\r\n          this.props.navigation.reset({index: 0, routes: [{ name: 'JoueurInterface' }],});\r\n        }\r\n        \r\n        else{\r\n          alert(\"Reessayer\");\r\n          console.log(userInformation.type);\r\n        }\r\n\r\n      }\r\n\r\n    /* Rendu de l'écran */\r\n    render(){\r\n    return(\r\n    <SafeAreaView style={styles.container}>\r\n      <View style={styles.Logo}>\r\n        <Image\r\n          source={require('../assets/image/logo1.png')}\r\n        />\r\n      </View>\r\n      <View style={styles.usernameBlock}>\r\n        <TextInput style={styles.loginText}\r\n        placeholder=\"Nom d'utilisateur\"\r\n        autoCapitalize='none'\r\n        onChangeText={username => this.setState({username})}\r\n        />\r\n      </View>\r\n  \r\n      <View style={styles.passwordBlock}>\r\n        <TextInput style={styles.loginText} \r\n        placeholder=\"Mot de passe\" \r\n        secureTextEntry={true}\r\n        autoCapitalize='none'\r\n        onChangeText={userPassword => this.setState({userPassword})}\r\n        />\r\n      </View>\r\n  \r\n      <View>\r\n      <TouchableOpacity style={styles.BoutonConnexion} \r\n      onPress={this.connexion}>\r\n          <Text style = {styles.BoutonText}>Connexion</Text>\r\n          </TouchableOpacity>\r\n      </View>\r\n    </SafeAreaView>   \r\n    );\r\n  };\r\n \r\n}\r\n  /*Fin Ecran LoginScreen */\r\n  \r\n  //Fonction styles contenur le design en CSS\r\n  const styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      alignItems:'center',\r\n      backgroundColor:'#013E23'\r\n    },\r\n  \r\n    Logo: {\r\n      top:80,\r\n    },\r\n  \r\n    usernameBlock: {\r\n      marginTop:200,\r\n      alignItems:'center',\r\n      justifyContent:'center'\r\n    },\r\n  \r\n    loginText: {\r\n      padding:10,\r\n      justifyContent:'center',\r\n      width:200,\r\n      height:50,\r\n      fontSize:20,\r\n      borderRadius:20,\r\n      backgroundColor:\"#FFF\",\r\n      fontFamily: 'SFMedium',\r\n      textAlign:'center'\r\n    },\r\n  \r\n    passwordBlock: {\r\n      top:20,\r\n    },\r\n  \r\n    BoutonConnexion: {\r\n      top:100,\r\n      width:200,\r\n      height:50,\r\n      borderRadius:20,\r\n      backgroundColor:\"#39AD69\",\r\n      alignItems:\"center\",\r\n      justifyContent:\"center\"\r\n  \r\n    },\r\n  \r\n    BoutonText: {\r\n      fontSize: 20,\r\n      fontFamily: 'SFMedium',\r\n    }\r\n  \r\n  })"]},"metadata":{},"sourceType":"module"}