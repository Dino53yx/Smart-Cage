{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport EventEmitter from 'eventemitter3';\nvar Sockets = NativeModules.TcpSockets;\nimport Socket from \"./Socket\";\nimport { nativeEventEmitter, getNextId } from \"./Globals\";\n\nvar Server = function (_EventEmitter) {\n  _inherits(Server, _EventEmitter);\n\n  var _super = _createSuper(Server);\n\n  function Server(connectionCallback) {\n    var _this;\n\n    _classCallCheck(this, Server);\n\n    _this = _super.call(this);\n    _this._id = getNextId();\n    _this._eventEmitter = nativeEventEmitter;\n    _this._connections = new Set();\n    _this._localAddress = undefined;\n    _this._localPort = undefined;\n    _this._localFamily = undefined;\n    _this.listening = false;\n\n    _this._registerEvents();\n\n    if (connectionCallback) _this.on('connection', connectionCallback);\n\n    _this.on('close', _this._setDisconnected, _assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(Server, [{\n    key: \"listen\",\n    value: function listen(options, callback) {\n      var _this2 = this;\n\n      if (this._localAddress !== undefined) throw new Error('ERR_SERVER_ALREADY_LISTEN');\n\n      var gotOptions = _objectSpread({}, options);\n\n      gotOptions.host = gotOptions.host || '0.0.0.0';\n      this.once('listening', function () {\n        _this2.listening = true;\n        if (callback) callback();\n      });\n      Sockets.listen(this._id, gotOptions);\n      return this;\n    }\n  }, {\n    key: \"getConnections\",\n    value: function getConnections(callback) {\n      callback(null, this._connections.size);\n      return this;\n    }\n  }, {\n    key: \"close\",\n    value: function close(callback) {\n      if (!this._localAddress) {\n        callback == null ? void 0 : callback(new Error('ERR_SERVER_NOT_RUNNING'));\n        return this;\n      }\n\n      if (callback) this.once('close', callback);\n      this.listening = false;\n      Sockets.close(this._id);\n      return this;\n    }\n  }, {\n    key: \"address\",\n    value: function address() {\n      if (!this._localAddress) return null;\n      return {\n        address: this._localAddress,\n        port: this._localPort,\n        family: this._localFamily\n      };\n    }\n  }, {\n    key: \"ref\",\n    value: function ref() {\n      console.warn('react-native-tcp-socket: Server.ref() method will have no effect.');\n      return this;\n    }\n  }, {\n    key: \"unref\",\n    value: function unref() {\n      console.warn('react-native-tcp-socket: Server.unref() method will have no effect.');\n      return this;\n    }\n  }, {\n    key: \"_registerEvents\",\n    value: function _registerEvents() {\n      var _this3 = this;\n\n      this._errorListener = this._eventEmitter.addListener('listening', function (evt) {\n        if (evt.id !== _this3._id) return;\n        _this3._localAddress = evt.connection.localAddress;\n        _this3._localPort = evt.connection.localPort;\n        _this3._localFamily = evt.connection.localFamily;\n\n        _this3.emit('listening');\n      });\n      this._errorListener = this._eventEmitter.addListener('error', function (evt) {\n        if (evt.id !== _this3._id) return;\n\n        _this3.close();\n\n        _this3.emit('error', evt.error);\n      });\n      this._connectionsListener = this._eventEmitter.addListener('connection', function (evt) {\n        if (evt.id !== _this3._id) return;\n\n        var newSocket = _this3._buildSocket(evt.info);\n\n        newSocket.on('close', function () {\n          _this3._connections.delete(newSocket);\n\n          if (!_this3.listening && _this3._connections.size === 0) _this3.emit('close');\n        });\n\n        _this3._connections.add(newSocket);\n\n        _this3.emit('connection', newSocket);\n      });\n    }\n  }, {\n    key: \"_setDisconnected\",\n    value: function _setDisconnected() {\n      this._localAddress = undefined;\n      this._localPort = undefined;\n      this._localFamily = undefined;\n    }\n  }, {\n    key: \"_buildSocket\",\n    value: function _buildSocket(info) {\n      var newSocket = new Socket();\n\n      newSocket._setId(info.id);\n\n      newSocket._setConnected(info.connection);\n\n      return newSocket;\n    }\n  }]);\n\n  return Server;\n}(EventEmitter);\n\nexport { Server as default };","map":{"version":3,"sources":["C:/Users/Massimiliano/Desktop/Perso/Programmation/Application_Mobile/SmartCage/node_modules/react-native-tcp-socket/src/Server.js"],"names":["EventEmitter","Sockets","NativeModules","TcpSockets","Socket","nativeEventEmitter","getNextId","Server","connectionCallback","_id","_eventEmitter","_connections","Set","_localAddress","undefined","_localPort","_localFamily","listening","_registerEvents","on","_setDisconnected","options","callback","Error","gotOptions","host","once","listen","size","close","address","port","family","console","warn","_errorListener","addListener","evt","id","connection","localAddress","localPort","localFamily","emit","error","_connectionsListener","newSocket","_buildSocket","info","delete","add","_setId","_setConnected"],"mappings":"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","sourcesContent":["'use strict';\n\nimport { NativeModules } from 'react-native';\nimport EventEmitter from 'eventemitter3';\nconst Sockets = NativeModules.TcpSockets;\nimport Socket from './Socket';\nimport { nativeEventEmitter, getNextId } from './Globals';\n\n/**\n * @typedef {object} ServerEvents\n * @property {() => void} close\n * @property {(socket: Socket) => void} connection\n * @property {() => void} listening\n * @property {(err: Error) => void} error\n *\n * @extends {EventEmitter<ServerEvents, any>}\n */\nexport default class Server extends EventEmitter {\n    /**\n     * @param {(socket: Socket) => void} [connectionCallback] Automatically set as a listener for the `'connection'` event.\n     */\n    constructor(connectionCallback) {\n        super();\n        /** @private */\n        this._id = getNextId();\n        /** @private */\n        this._eventEmitter = nativeEventEmitter;\n        /** @private @type {Set<Socket>} */\n        this._connections = new Set();\n        /** @private */\n        this._localAddress = undefined;\n        /** @private */\n        this._localPort = undefined;\n        /** @private */\n        this._localFamily = undefined;\n        this.listening = false;\n        this._registerEvents();\n        if (connectionCallback) this.on('connection', connectionCallback);\n        this.on('close', this._setDisconnected, this);\n    }\n\n    /**\n     * Start a server listening for connections.\n     *\n     * This function is asynchronous. When the server starts listening, the `'listening'` event will be emitted.\n     * The last parameter `callback` will be added as a listener for the `'listening'` event.\n     *\n     * The `server.listen()` method can be called again if and only if there was an error during the first\n     * `server.listen()` call or `server.close()` has been called. Otherwise, an `ERR_SERVER_ALREADY_LISTEN`\n     * error will be thrown.\n     *\n     * @param {{ port: number; host: string; reuseAddress?: boolean}} options\n     * @param {() => void} [callback]\n     * @returns {Server}\n     */\n    listen(options, callback) {\n        if (this._localAddress !== undefined) throw new Error('ERR_SERVER_ALREADY_LISTEN');\n        const gotOptions = { ...options };\n        gotOptions.host = gotOptions.host || '0.0.0.0';\n        this.once('listening', () => {\n            this.listening = true;\n            if (callback) callback();\n        });\n        Sockets.listen(this._id, gotOptions);\n        return this;\n    }\n\n    /**\n     * Asynchronously get the number of concurrent connections on the server.\n     *\n     * Callback should take two arguments `err` and `count`.\n     *\n     * @param {(err: Error | null, count: number) => void} callback\n     * @returns {Server}\n     */\n    getConnections(callback) {\n        callback(null, this._connections.size);\n        return this;\n    }\n\n    /**\n     * Stops the server from accepting new connections and keeps existing connections.\n     * This function is asynchronous, the server is finally closed when all connections are ended and the server emits a `'close'` event.\n     * The optional callback will be called once the `'close'` event occurs. Unlike that event, it will be called with an `Error` as its\n     * only argument if the server was not open when it was closed.\n     *\n     * @param {(err?: Error) => void} [callback] Called when the server is closed.\n     * @returns {Server}\n     */\n    close(callback) {\n        if (!this._localAddress) {\n            callback?.(new Error('ERR_SERVER_NOT_RUNNING'));\n            return this;\n        }\n        if (callback) this.once('close', callback);\n        this.listening = false;\n        Sockets.close(this._id);\n        return this;\n    }\n\n    /**\n     * Returns the bound `address`, the address `family` name, and `port` of the server as reported by the operating system if listening\n     * on an IP socket (useful to find which port was assigned when getting an OS-assigned address):\n     * `{ port: 12346, family: 'IPv4', address: '127.0.0.1' }`.\n     *\n     * @returns {import('./Socket').AddressInfo | null}\n     */\n    address() {\n        if (!this._localAddress) return null;\n        return { address: this._localAddress, port: this._localPort, family: this._localFamily };\n    }\n\n    ref() {\n        console.warn('react-native-tcp-socket: Server.ref() method will have no effect.');\n        return this;\n    }\n\n    unref() {\n        console.warn('react-native-tcp-socket: Server.unref() method will have no effect.');\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    _registerEvents() {\n        this._errorListener = this._eventEmitter.addListener('listening', (evt) => {\n            if (evt.id !== this._id) return;\n            this._localAddress = evt.connection.localAddress;\n            this._localPort = evt.connection.localPort;\n            this._localFamily = evt.connection.localFamily;\n            this.emit('listening');\n        });\n        this._errorListener = this._eventEmitter.addListener('error', (evt) => {\n            if (evt.id !== this._id) return;\n            this.close();\n            this.emit('error', evt.error);\n        });\n        this._connectionsListener = this._eventEmitter.addListener('connection', (evt) => {\n            if (evt.id !== this._id) return;\n            const newSocket = this._buildSocket(evt.info);\n            // Emit 'close' when all connection closed\n            newSocket.on('close', () => {\n                this._connections.delete(newSocket);\n                if (!this.listening && this._connections.size === 0) this.emit('close');\n            });\n            this._connections.add(newSocket);\n            this.emit('connection', newSocket);\n        });\n    }\n\n    /**\n     * @private\n     */\n    _setDisconnected() {\n        this._localAddress = undefined;\n        this._localPort = undefined;\n        this._localFamily = undefined;\n    }\n\n    /**\n     * @private\n     * @param {{ id: number; connection: import('./Socket').NativeConnectionInfo; }} info\n     * @returns {Socket}\n     */\n    _buildSocket(info) {\n        const newSocket = new Socket();\n        newSocket._setId(info.id);\n        newSocket._setConnected(info.connection);\n        return newSocket;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}